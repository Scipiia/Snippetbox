// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: snippet.sql

package db

import (
	"context"
)

const createSnippet = `-- name: CreateSnippet :one
INSERT INTO snippets (
  user_id,
  title,
  content
) VALUES (
  $1, $2, $3
)
RETURNING id, user_id, title, content, created
`

type CreateSnippetParams struct {
	UserID  int32  `json:"user_id"`
	Title   string `json:"title"`
	Content string `json:"content"`
}

func (q *Queries) CreateSnippet(ctx context.Context, arg CreateSnippetParams) (Snippet, error) {
	row := q.db.QueryRowContext(ctx, createSnippet, arg.UserID, arg.Title, arg.Content)
	var i Snippet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.Created,
	)
	return i, err
}

const deleteSnippet = `-- name: DeleteSnippet :exec
DELETE FROM snippets
WHERE id = $1
`

func (q *Queries) DeleteSnippet(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteSnippet, id)
	return err
}

const getSnippet = `-- name: GetSnippet :one
SELECT id, user_id, title, content, created FROM snippets
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSnippet(ctx context.Context, id int32) (Snippet, error) {
	row := q.db.QueryRowContext(ctx, getSnippet, id)
	var i Snippet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.Created,
	)
	return i, err
}

const listSnippets = `-- name: ListSnippets :many
SELECT id, user_id, title, content, created FROM snippets
WHERE user_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListSnippetsParams struct {
	UserID int32 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListSnippets(ctx context.Context, arg ListSnippetsParams) ([]Snippet, error) {
	rows, err := q.db.QueryContext(ctx, listSnippets, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Snippet
	for rows.Next() {
		var i Snippet
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Content,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
