// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: account.sql

package db

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO account (
  login,
  username
) VALUES (
  $1, $2
)
RETURNING id, login, username, created
`

type CreateAccountParams struct {
	Login    string `json:"login"`
	Username string `json:"username"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.Login, arg.Username)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Username,
		&i.Created,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM account
WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, id)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, login, username, created FROM account
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id int32) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Username,
		&i.Created,
	)
	return i, err
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE account
  set username = $2
WHERE id = $1
RETURNING id, login, username, created
`

type UpdateAccountParams struct {
	ID       int32  `json:"id"`
	Username string `json:"username"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccount, arg.ID, arg.Username)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Username,
		&i.Created,
	)
	return i, err
}
